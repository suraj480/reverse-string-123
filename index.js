const fs = require('fs'); const path = require('path'); function formatCode(code, fileType) { if (fileType === 'js') { return code.replace(/\s+/g, ' ').trim(); } else if (fileType === 'html') { return formatHtml(code); } return code; } function formatHtml(code) { const indentSize = 2; const lines = code.split('\n'); let indents = 0; let formattedCode = ''; lines.forEach((line) => { const trimmedLine = line.trim(); if (trimmedLine.startsWith('</')) { indents -= 1; } formattedCode += ' '.repeat(indents * indentSize) + trimmedLine + '\n'; if (trimmedLine.startsWith('<') && !trimmedLine.endsWith('/>')) { indents += 1; } }); return formattedCode.trim(); } function formatFile(filePath) { try { const code = fs.readFileSync(filePath, 'utf-8'); const fileType = path.extname(filePath).slice(1); const formattedCode = formatCode(code, fileType); fs.writeFileSync(filePath, formattedCode, 'utf-8'); console.log(`Formatted: ${filePath}`); } catch (error) { console.error(`Error formatting ${filePath}: ${error.message}`); } } function formatDirectory(directoryPath) { const files = fs.readdirSync(directoryPath); files.forEach((file) => { const filePath = path.join(directoryPath, file); if (fs.statSync(filePath).isDirectory()) { formatDirectory(filePath); } else { const fileExtension = path.extname(filePath).slice(1); if (['js', 'html'].includes(fileExtension)) { formatFile(filePath); } } }); } const projectDirectory = path.resolve(__dirname); console.log(projectDirectory); formatDirectory(projectDirectory);